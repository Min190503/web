import _extends from "@babel/runtime/helpers/extends";
import _typeof from "@babel/runtime/helpers/typeof";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["href", "children", "backgroundColor", "padding", "paddingBlock", "paddingBlockStart", "paddingBlockEnd", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "testId", "xcss", "target", "rel", "onClick", "interactionName", "componentName", "analyticsContext"];
import React, { forwardRef, useCallback, useContext } from 'react';
import invariant from 'tiny-invariant';
import { usePlatformLeafEventHandler } from '@atlaskit/analytics-next';
import { useRouterLink } from '@atlaskit/app-provider';
import noop from '@atlaskit/ds-lib/noop';
import InteractionContext from '@atlaskit/interaction-context';
import { xcss } from '../xcss/xcss';
import Box from './box';
// TODO: Duplicated FocusRing styles due to lack of `xcss` support
// and to prevent additional dependency
var baseFocusRingStyles = {
  outlineColor: 'color.border.focused',
  outlineWidth: 'border.width.outline',
  outlineStyle: 'solid',
  outlineOffset: 'space.025'
};
var defaultStyles = xcss({
  textDecoration: 'underline'
});
var focusRingStyles = xcss({
  ':focus-visible': baseFocusRingStyles,
  '@supports not selector(*:focus-visible)': {
    ':focus': baseFocusRingStyles
  },
  '@media screen and (forced-colors: active), screen and (-ms-high-contrast: active)': {
    ':focus-visible': {
      outline: '1px solid'
    }
  }
});
var IS_EXTERNAL_LINK_REGEX = /^(?:(http|https):\/\/)/;
var IS_NON_HTTP_BASED = /^(((mailto|tel|sms):)|(#))/;
var Anchor = function Anchor(_ref, ref) {
  var href = _ref.href,
    children = _ref.children,
    backgroundColor = _ref.backgroundColor,
    padding = _ref.padding,
    paddingBlock = _ref.paddingBlock,
    paddingBlockStart = _ref.paddingBlockStart,
    paddingBlockEnd = _ref.paddingBlockEnd,
    paddingInline = _ref.paddingInline,
    paddingInlineStart = _ref.paddingInlineStart,
    paddingInlineEnd = _ref.paddingInlineEnd,
    testId = _ref.testId,
    xcssStyles = _ref.xcss,
    target = _ref.target,
    rel = _ref.rel,
    _ref$onClick = _ref.onClick,
    providedOnClick = _ref$onClick === void 0 ? noop : _ref$onClick,
    interactionName = _ref.interactionName,
    componentName = _ref.componentName,
    analyticsContext = _ref.analyticsContext,
    htmlAttributes = _objectWithoutProperties(_ref, _excluded);
  var interactionContext = useContext(InteractionContext);
  var handleClick = useCallback(function (e, analyticsEvent) {
    interactionContext && interactionContext.tracePress(interactionName, e.timeStamp);
    providedOnClick(e, analyticsEvent);
  }, [providedOnClick, interactionContext, interactionName]);
  var onClick = usePlatformLeafEventHandler({
    fn: handleClick,
    action: 'clicked',
    componentName: componentName || 'Anchor',
    packageName: "@atlaskit/primitives",
    packageVersion: "5.1.2",
    analyticsData: analyticsContext,
    actionSubject: 'link'
  });
  var RouterLink = useRouterLink();

  // We're type coercing this as Compiled styles in an array isn't supported by the types
  // But the runtime accepts it none-the-wiser. We can remove this entire block and replace
  // it with cx(defaultStyles, focusRingStyles, xcssStyles) when we've moved away from Emotion.
  var styles = Array.isArray(xcssStyles) ? [defaultStyles, focusRingStyles].concat(_toConsumableArray(xcssStyles)) : [defaultStyles, focusRingStyles, xcssStyles];
  var isExternal = typeof href === 'string' && IS_EXTERNAL_LINK_REGEX.test(href);
  var isNonHttpBased = typeof href === 'string' && IS_NON_HTTP_BASED.test(href);

  /**
   * Renders a router link if:
   *
   * - a link component is set in the app provider
   * - it's not an external link (starting with `http://` or `https://`)
   * - it's not a non-HTTP-based link (e.g. Emails, phone numbers, hash links etc.).
   */
  var isRouterLink = RouterLink && !isExternal && !isNonHttpBased;
  var hrefObjectUsedWithoutRouterLink = RouterLink === undefined && _typeof(href) === 'object';
  invariant(!hrefObjectUsedWithoutRouterLink, "@atlaskit/primitives: Anchor primitive cannot pass an object to 'href' unless a router link is configured in the AppProvider");
  return /*#__PURE__*/React.createElement(Box
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  , _extends({}, htmlAttributes, {
    // @ts-expect-error (TODO: Box doesn't allow `as` components)
    as: isRouterLink ? RouterLink : 'a',
    ref: ref,
    testId: testId,
    "data-is-router-link": testId ? isRouterLink ? 'true' : 'false' : undefined,
    href: !isRouterLink && typeof href !== 'string' ? undefined : href,
    target: isExternal && target === undefined ? '_blank' : target,
    rel: isExternal && rel === undefined ? 'noopener noreferrer' : rel,
    backgroundColor: backgroundColor,
    padding: padding,
    paddingBlock: paddingBlock,
    paddingBlockStart: paddingBlockStart,
    paddingBlockEnd: paddingBlockEnd,
    paddingInline: paddingInline,
    paddingInlineStart: paddingInlineStart,
    paddingInlineEnd: paddingInlineEnd,
    onClick: onClick
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
    ,
    xcss: styles
  }), children);
};

// Workarounds to support generic types with forwardRef
/**
 * __UNSAFE_ANCHOR__
 *
 * @internal Still under development. Do not use.
 *
 * Anchor is a primitive for building custom anchor links. It's a wrapper around the HTML `<a>` element that provides a consistent API for handling client-side routing and Atlassian Design System styling.
 *
 * This component is mostly used by other design system components, such as the [link component](/components/link/usage).
 *
 * - [Examples](https://atlassian.design/components/primitives/anchor/examples)
 * - [Code](https://atlassian.design/components/primitives/anchor/code)
 * - [Usage](https://atlassian.design/components/primitives/anchor/usage)
 */
var UNSAFE_ANCHOR = /*#__PURE__*/forwardRef(Anchor);
export default UNSAFE_ANCHOR;