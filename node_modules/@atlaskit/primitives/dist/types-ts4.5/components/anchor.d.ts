import React, { type ReactNode, type Ref } from 'react';
import { UIAnalyticsEvent } from '@atlaskit/analytics-next';
import { type RouterLinkComponentProps } from '@atlaskit/app-provider';
import { type BoxProps } from './box';
export type AnchorProps<RouterLinkConfig extends Record<string, any> = never> = RouterLinkComponentProps<RouterLinkConfig> & Omit<BoxProps<'a'>, 'href' | 'as' | 'children' | 'style' | 'onClick'> & {
    /**
     * `children` should be defined to ensure links have text.
     */
    children: ReactNode;
    /**
     * Handler to be called on click. The second argument can be used to track analytics data. See the tutorial in the analytics-next package for details.
     */
    onClick?: (e: React.MouseEvent<HTMLAnchorElement>, analyticsEvent: UIAnalyticsEvent) => void;
    /**
     * An optional name used to identify the interaction type to press listeners. For example, interaction tracing. For more information,
     * see [UFO integration into Design System components](https://go.atlassian.com/react-ufo-dst-integration).
     */
    interactionName?: string;
    /**
     * An optional component name used to identify this component to press listeners. This can be used if a parent component's name is preferred. For example, interaction tracing. For more information,
     * see [UFO integration into Design System components](https://go.atlassian.com/react-ufo-dst-integration).
     */
    componentName?: string;
    /**
     * Additional information to be included in the `context` of analytics events that come from anchor.
     */
    analyticsContext?: Record<string, any>;
};
declare const Anchor: <RouterLinkConfig extends Record<string, any> = never>({ href, children, backgroundColor, padding, paddingBlock, paddingBlockStart, paddingBlockEnd, paddingInline, paddingInlineStart, paddingInlineEnd, testId, xcss: xcssStyles, target, rel, onClick: providedOnClick, interactionName, componentName, analyticsContext, ...htmlAttributes }: AnchorProps<RouterLinkConfig>, ref: Ref<HTMLAnchorElement>) => JSX.Element;
/**
 * __UNSAFE_ANCHOR__
 *
 * @internal Still under development. Do not use.
 *
 * Anchor is a primitive for building custom anchor links. It's a wrapper around the HTML `<a>` element that provides a consistent API for handling client-side routing and Atlassian Design System styling.
 *
 * This component is mostly used by other design system components, such as the [link component](/components/link/usage).
 *
 * - [Examples](https://atlassian.design/components/primitives/anchor/examples)
 * - [Code](https://atlassian.design/components/primitives/anchor/code)
 * - [Usage](https://atlassian.design/components/primitives/anchor/usage)
 */
declare const UNSAFE_ANCHOR: <RouterLinkConfig extends Record<string, any> = never>(props: AnchorProps<RouterLinkConfig> & {
    ref?: Ref<HTMLAnchorElement>;
}) => ReturnType<typeof Anchor>;
export default UNSAFE_ANCHOR;
