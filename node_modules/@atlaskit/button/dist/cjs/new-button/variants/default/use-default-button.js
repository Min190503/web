"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _content = _interopRequireDefault(require("../shared/content"));
var _useButtonBase = _interopRequireDefault(require("../shared/use-button-base"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * __Use default button base__
 *
 * A React hook that accepts a set of default Button props,
 * and processes them to return consistent base props for usage
 * across Button and LinkButton variants.
 *
 * @private
 */
var useDefaultButton = function useDefaultButton(_ref) {
  var analyticsContext = _ref.analyticsContext,
    appearance = _ref.appearance,
    autoFocus = _ref.autoFocus,
    buttonType = _ref.buttonType,
    IconBefore = _ref.iconBefore,
    UNSAFE_iconBefore_size = _ref.UNSAFE_iconBefore_size,
    IconAfter = _ref.iconAfter,
    UNSAFE_iconAfter_size = _ref.UNSAFE_iconAfter_size,
    interactionName = _ref.interactionName,
    isDisabled = _ref.isDisabled,
    isSelected = _ref.isSelected,
    children = _ref.children,
    onClick = _ref.onClick,
    onMouseDownCapture = _ref.onMouseDownCapture,
    onMouseUpCapture = _ref.onMouseUpCapture,
    onKeyDownCapture = _ref.onKeyDownCapture,
    onKeyUpCapture = _ref.onKeyUpCapture,
    onTouchStartCapture = _ref.onTouchStartCapture,
    onTouchEndCapture = _ref.onTouchEndCapture,
    onPointerDownCapture = _ref.onPointerDownCapture,
    onPointerUpCapture = _ref.onPointerUpCapture,
    onClickCapture = _ref.onClickCapture,
    overlay = _ref.overlay,
    ref = _ref.ref,
    shouldFitContainer = _ref.shouldFitContainer,
    spacing = _ref.spacing;
  var hasOverlay = Boolean(overlay);
  var baseProps = (0, _useButtonBase.default)({
    analyticsContext: analyticsContext,
    appearance: appearance,
    autoFocus: autoFocus,
    buttonType: buttonType,
    children: /*#__PURE__*/_react.default.createElement(_react.Fragment, null, IconBefore && /*#__PURE__*/_react.default.createElement(_content.default, {
      type: "icon",
      hasOverlay: hasOverlay
    }, /*#__PURE__*/_react.default.createElement(IconBefore, {
      label: "",
      size: UNSAFE_iconBefore_size
    })), children && /*#__PURE__*/_react.default.createElement(_content.default, {
      hasOverlay: hasOverlay
    }, children), IconAfter && /*#__PURE__*/_react.default.createElement(_content.default, {
      type: "icon",
      hasOverlay: hasOverlay
    }, /*#__PURE__*/_react.default.createElement(IconAfter, {
      label: "",
      size: UNSAFE_iconAfter_size
    }))),
    interactionName: interactionName,
    isDisabled: isDisabled,
    isSelected: isSelected,
    onClick: onClick,
    onMouseDownCapture: onMouseDownCapture,
    onMouseUpCapture: onMouseUpCapture,
    onKeyDownCapture: onKeyDownCapture,
    onKeyUpCapture: onKeyUpCapture,
    onTouchStartCapture: onTouchStartCapture,
    onTouchEndCapture: onTouchEndCapture,
    onPointerDownCapture: onPointerDownCapture,
    onPointerUpCapture: onPointerUpCapture,
    onClickCapture: onClickCapture,
    overlay: overlay,
    ref: ref,
    shouldFitContainer: shouldFitContainer,
    spacing: spacing,
    hasIconBefore: Boolean(IconBefore),
    hasIconAfter: Boolean(IconAfter)
  });
  return baseProps;
};
var _default = exports.default = useDefaultButton;