"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var colors = _interopRequireWildcard(require("@atlaskit/theme/colors"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var values = {
  // Default appearance
  background: {
    default: {
      /**
       * Some colors need specific fallback colors specified
       * to match the original Button when no theme is active.
       *
       * This is because the `xcss` automatic token fallbacks use
       * the legacy themes, which do not match original colors.
       */
      // @ts-expect-error
      default: "var(--ds-background-neutral, ".concat(colors.N20A, ")"),
      hover: 'color.background.neutral.hovered',
      active: 'color.background.neutral.pressed',
      // @ts-expect-error
      disabled: "var(--ds-background-disabled, ".concat(colors.N20A, ")"),
      // @ts-expect-error
      selected: "var(--ds-background-selected, ".concat(colors.N700, ")")
    },
    primary: {
      default: 'color.background.brand.bold',
      hover: 'color.background.brand.bold.hovered',
      active: 'color.background.brand.bold.pressed',
      // @ts-expect-error
      disabled: "var(--ds-background-disabled, ".concat(colors.N20A, ")"),
      // @ts-expect-error
      selected: "var(--ds-background-selected, ".concat(colors.N700, ")")
    },
    warning: {
      default: 'color.background.warning.bold',
      hover: 'color.background.warning.bold.hovered',
      active: 'color.background.warning.bold.pressed',
      // @ts-expect-error
      disabled: "var(--ds-background-disabled, ".concat(colors.N20A, ")"),
      // @ts-expect-error
      selected: "var(--ds-background-selected, ".concat(colors.Y400, ")")
    },
    danger: {
      default: 'color.background.danger.bold',
      hover: 'color.background.danger.bold.hovered',
      active: 'color.background.danger.bold.pressed',
      // @ts-expect-error
      disabled: "var(--ds-background-disabled, ".concat(colors.N20A, ")"),
      // @ts-expect-error
      selected: "var(--ds-background-selected, ".concat(colors.R500, ")")
    },
    link: {
      default: 'color.background.neutral.subtle',
      // @ts-expect-error
      selected: "var(--ds-background-selected, ".concat(colors.N700, ")")
    },
    subtle: {
      default: 'color.background.neutral.subtle',
      hover: 'color.background.neutral.subtle.hovered',
      active: 'color.background.neutral.subtle.pressed',
      // @ts-expect-error
      disabled: "var(--ds-background-neutral-subtle, none)",
      // @ts-expect-error
      selected: "var(--ds-background-selected, ".concat(colors.N700, ")")
    },
    'subtle-link': {
      default: 'color.background.neutral.subtle',
      // @ts-expect-error
      selected: "var(--ds-background-selected, ".concat(colors.N700, ")")
    }
  },
  color: {
    default: {
      // @ts-expect-error
      default: "var(--ds-text, ".concat(colors.N500, ")"),
      // @ts-expect-error
      active: "var(--ds-text, ".concat(colors.B400, ")"),
      disabled: 'color.text.disabled',
      // @ts-expect-error
      selected: "var(--ds-text-selected, ".concat(colors.N20, ")")
    },
    primary: {
      default: 'color.text.inverse',
      disabled: 'color.text.disabled',
      // @ts-expect-error
      selected: "var(--ds-text-selected, ".concat(colors.N20, ")")
    },
    warning: {
      default: 'color.text.warning.inverse',
      disabled: 'color.text.disabled',
      // @ts-expect-error
      selected: "var(--ds-text-selected, ".concat(colors.N800, ")")
    },
    danger: {
      default: 'color.text.inverse',
      disabled: 'color.text.disabled',
      // @ts-expect-error
      selected: "var(--ds-text-selected, ".concat(colors.N0, ")")
    },
    link: {
      default: 'color.link',
      // @ts-expect-error
      hover: "var(--ds-link, ".concat(colors.B300, ")"),
      active: 'color.link.pressed',
      disabled: 'color.text.disabled',
      // @ts-expect-error
      selected: "var(--ds-text-selected, ".concat(colors.N20, ")")
    },
    subtle: {
      // @ts-expect-error
      default: "var(--ds-text, ".concat(colors.N500, ")"),
      // @ts-expect-error
      active: "var(--ds-text, ".concat(colors.B400, ")"),
      disabled: 'color.text.disabled',
      // @ts-expect-error
      selected: "var(--ds-text-selected, ".concat(colors.N20, ")")
    },
    'subtle-link': {
      // @ts-expect-error
      default: "var(--ds-text-subtle, ".concat(colors.N200, ")"),
      // @ts-expect-error
      hover: "var(--ds-text-subtle, ".concat(colors.N90, ")"),
      // @ts-expect-error
      active: "var(--ds-text, ".concat(colors.N400, ")"),
      disabled: 'color.text.disabled',
      // @ts-expect-error
      selected: "var(--ds-text-selected, ".concat(colors.N20, ")")
    }
  }
};
var _default = exports.default = values;