import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["analyticsContext", "interactionName", "autoFocus", "appearance", "spacing", "isDisabled", "isSelected", "icon", "label", "overlay", "onClick", "onMouseDownCapture", "onMouseUpCapture", "onKeyDownCapture", "onKeyUpCapture", "onTouchStartCapture", "onTouchEndCapture", "onPointerDownCapture", "onPointerUpCapture", "onClickCapture", "shape", "testId", "UNSAFE_size", "href", "aria-label"];
import React, { forwardRef, memo } from 'react';
import UNSAFE_ANCHOR from '@atlaskit/primitives/anchor';
import useIconButton from './use-icon-button';
var LinkIconButtonBase = function LinkIconButtonBase(_ref, ref) {
  var analyticsContext = _ref.analyticsContext,
    interactionName = _ref.interactionName,
    autoFocus = _ref.autoFocus,
    appearance = _ref.appearance,
    spacing = _ref.spacing,
    isDisabled = _ref.isDisabled,
    isSelected = _ref.isSelected,
    icon = _ref.icon,
    label = _ref.label,
    overlay = _ref.overlay,
    onClick = _ref.onClick,
    onMouseDownCapture = _ref.onMouseDownCapture,
    onMouseUpCapture = _ref.onMouseUpCapture,
    onKeyDownCapture = _ref.onKeyDownCapture,
    onKeyUpCapture = _ref.onKeyUpCapture,
    onTouchStartCapture = _ref.onTouchStartCapture,
    onTouchEndCapture = _ref.onTouchEndCapture,
    onPointerDownCapture = _ref.onPointerDownCapture,
    onPointerUpCapture = _ref.onPointerUpCapture,
    onClickCapture = _ref.onClickCapture,
    shape = _ref.shape,
    testId = _ref.testId,
    UNSAFE_size = _ref.UNSAFE_size,
    href = _ref.href,
    preventedAriaLabel = _ref['aria-label'],
    rest = _objectWithoutProperties(_ref, _excluded);
  var baseProps = useIconButton({
    analyticsContext: analyticsContext,
    appearance: appearance,
    autoFocus: autoFocus,
    buttonType: 'link',
    icon: icon,
    interactionName: interactionName,
    isDisabled: isDisabled,
    isSelected: isSelected,
    label: label,
    onClick: onClick,
    onMouseDownCapture: onMouseDownCapture,
    onMouseUpCapture: onMouseUpCapture,
    onKeyDownCapture: onKeyDownCapture,
    onKeyUpCapture: onKeyUpCapture,
    onTouchStartCapture: onTouchStartCapture,
    onTouchEndCapture: onTouchEndCapture,
    onPointerDownCapture: onPointerDownCapture,
    onPointerUpCapture: onPointerUpCapture,
    onClickCapture: onClickCapture,
    overlay: overlay,
    ref: ref,
    shape: shape,
    spacing: spacing,
    UNSAFE_size: UNSAFE_size
  });
  return /*#__PURE__*/React.createElement(UNSAFE_ANCHOR
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  , _extends({}, rest, {
    ref: baseProps.ref,
    xcss: baseProps.xcss,
    onClick: baseProps.onClick,
    onMouseDownCapture: baseProps.onMouseDownCapture,
    onMouseUpCapture: baseProps.onMouseUpCapture,
    onKeyDownCapture: baseProps.onKeyDownCapture,
    onKeyUpCapture: baseProps.onKeyUpCapture,
    onTouchStartCapture: baseProps.onTouchStartCapture,
    onTouchEndCapture: baseProps.onTouchEndCapture,
    onPointerDownCapture: baseProps.onPointerDownCapture,
    onPointerUpCapture: baseProps.onPointerUpCapture,
    onClickCapture: baseProps.onClickCapture,
    testId: testId
    /**
     * Disable link in an accessible way using `href`, `role`, and `aria-disabled`.
     * @see https://a11y-guidelines.orange.com/en/articles/disable-elements/#disable-a-link
     */
    // @ts-expect-error (`href` is required, we could make it optional but don't want to encourage this pattern elsewhere)
    ,
    href: baseProps.isDisabled ? undefined : href,
    role: baseProps.isDisabled ? 'link' : undefined,
    "aria-disabled": baseProps.isDisabled === true ? true : undefined,
    componentName: "LinkIconButton",
    analyticsContext: analyticsContext,
    interactionName: interactionName
  }), baseProps.children);
};

// Workarounds to support generic types with forwardRef + memo
var WithRef = /*#__PURE__*/forwardRef(LinkIconButtonBase);

/**
 * __Link Icon Button__
 *
 * Renders a link in the style of an icon button.
 *
 * - [Examples](https://atlassian.design/components/button/examples)
 * - [Code](https://atlassian.design/components/button/code)
 * - [Usage](https://atlassian.design/components/button/usage)
 */
var LinkIconButton = /*#__PURE__*/memo(WithRef);
export default LinkIconButton;